I"Õ<p>Iâ€™ve been working on re-writing Daniel Shiffmanâ€™s <em>Nature of Code</em> boid/vehicle chapter in OpenFrameworks. It can be seen <a href="https://github.com/joshmurr/ofxBoids">here on Github</a>. As I say in the README <a href="https://github.com/after12am/ofxBoids">it has been done before</a> but I still want to do it as an exercise for myself, to furthur learn OF and C++, and as I learnt in my <a href="https://joshmurr.github.io/2019/03/02/old-code-case-study.html">previous post</a> I think it is a great learning experience to really pick apart something which you donâ€™t <em>quite</em> understand. Vector mathematics is something Iâ€™m still working on and find very ineresting, but converting the more theoretical, pure mathematics into useable code does lead to some head scratching.</p>

<p>Re-writing the code pretty much from the book got me to the point where I could draw a small arrow graphic which would follow and point at the mouse. But I ran in to some difficulty really understanding the maths behind it.</p>

<p><img src="../../../assets/images/vectors/follow_mouse.gif" alt="follow_mouse" /></p>

<p>So far the OF re-write (port? do you call it a â€˜portâ€™?) has got to the basic movement where the vehicle can â€˜seekâ€™ or â€˜arriveâ€™ at a target by slowing itâ€™s acceleration when it is within a certain distance. This meant I could set a â€˜preyâ€™ vehicle to move randomly from point to point every second, with another â€˜predatorâ€™ vehicle chasing it at a slower speed.</p>

<p><img src="../../../assets/images/vectors/simple_chase.gif" alt="pred_prey" /></p>

<p>So to get my head around it, I re-wrote it all <em>again</em> but this time in Javascript. This is partly because to get a quick prototype up and running, particularly if itâ€™s a visual thing, I do find JS to be very useful. Itâ€™s really quick and easy to start drawing on the screen, and not having to <em>compile and run</em> everytime is really handy.</p>

<p>I wrote a simple PVector class, as is found in the Processing library (with the help of <a href="https://www.khanacademy.org/computing/computer-programming/programming-natural-simulations/programming-vectors/a/static-functions-vs-instance-methods">Khan Academy</a> of course) and was able to get two vectors drawn on screen. The â€˜ah ha!â€™ moment with when I started to think of the â€˜pointâ€™ vectors as arrows from the origin (0,0) <em>to</em> the given points instead. Obtaining the director vector â€˜dirâ€™ I know is achieved by subtracting the target location from the current location, but it was only once I started seeing the vectors graphically did this make sense.</p>

<p>The second â€˜ah ha!â€™ moment with when I realised the screen co-ordinates has the x-axis flipped compared to a standard grid. All the maths I was doing by hand would give me a negative x-value compared to what I was getting on screen.</p>

<p>So I now have the JS and the OF/C++ libraries on the go and Iâ€™m sure Iâ€™ll develop both as it seems like a complimentary pair: one as a prototyping platform and the other as the more robust software thing with which I hope to create flocking simulations.</p>

<p><img src="../../../assets/images/vectors/vector_subtraction_arrow.gif" alt="js_vectors" /></p>

<p><br />
Josh</p>
:ET