I"å<p><a href="http://www.red3d.com/cwr/steer/gdc99/"><img src="http://www.red3d.com/cwr/steer/gdc99/figure8.gif" alt="reynolds" /></a></p>

<p>Iâ€™ve made some progress on the ofxBoids library Iâ€™m working on. Simple graphics with Vectors still involved some head scratching, but itâ€™s getting easier. My first attempt at implementing Craig Reynolds â€˜wanderingâ€™ algorithm in JavaScript was a mess. It kind of worked, but in a really weird way. I wonâ€™t go into it too much.</p>

<p><img src="../../../assets/images/vectors/jitter_target.gif" alt="js-jitter" /></p>

<p>Back in OpenFrameworks things went a bit more smoothly and it wasnâ€™t long before I was simply added a vector of a given magnitude and a random angle to the <em>desired</em> vector the boid was seeking.</p>

<p><img src="../../../assets/images/vectors/jitter_target_better.gif" alt="jitter-boid" /></p>

<p>It took longer to get the <em>debug</em> symbols to appear where I wanted them to, as the differentiation between a vector as a point in space, and a vector which describes magnitude and direction still gets me. But again, this seemed like a worthwhile exercise. In the GIF below you can see the circle which is placed around the target. The circle actually defines the region in which the <em>jitter</em> vector can be created where the radius is the madnitude, and it can be in any random direction.</p>

<p><img src="../../../assets/images/vectors/jitter_target_debug.gif" alt="jitter-boid-debug" /></p>

<p><br />
Josh</p>
:ET